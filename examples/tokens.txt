val a = 123u8// "ahaha"s 'a'c 0.34f32 1i 1.1i 10.34u128

behaviour(T) if Boh(T, U, [1, 2]) Compare {
    less(left: T, right: T) bool
    less_equal(left: T, right: T) bool
    gretater(left: T, right: T) bool
    greater_equal(left: T, right: T) bool
}

test my_test {
    if a == 1 == 2 == 3 != 4 < 6 is [..., 2, unknown] {
        println("{unknown}")
    }

    for bahs is (1, 2, 3) {

    }

    val a = {
        for {}
    }

    for a is 10 {}
}

type unit = ()

function factorial(n: u32) u128 = if n > 0 { n * factorial(n - 1) } else { 1 }

function factorial(n: u32) u128 => if n > 0 { n * factorial(n - 1) } else { 1 }

function(T, N: usize) if Compare(T) & Integral(T)
transform(source: [T], mutable dest: [T], map: function(T) T) unit
{
    for index in 0..source.size {
        dest[i] = map(source[i])
    }
}
/**
hide library ns.testing;
library ss
use a.a

hide test my_test {
    val a = 10;
    ++a;
    println("a = {a}")
}

hide val a = (a: 1, b: 3)(c: 1, d: 2)
val b = ns.core.List!(int)(a: 1, b: 3).a!([1, 2])

val list: List((T, 1 + 1), T, 10 + 1, SIZE ** 2, [1, 2, 3], [int], AMBIGUOS, function(int) bool)
        = List!(int)(1, 2, 3**4).name!(1 + 2^0, int)(1,function(a: int) bool {})

// second version
val list: List((T, 1 + 1), T, 10 + 1, SIZE ** 2, [1, 2, 3], [int], AMBIGUOS, function(int) bool)
        = List!(int)(1, 2, 3**4).name!(1 + 2^0, int)(1,function(a: int) bool {})

extend(const N: usize, T: Default & (Print | Boh)) Type(T, N) as You(1+1, T) {
    function typename(self) string {}
    function(U) f(u: U) {}
}

use ns.core.testing

hide function(T: Comparable & Iterable, const N: usize) sort(sequence: &array(T, N)) {}

type(T) maybe { some(T), none }
type(T, const N: usize) square = matrix(T, N ** 2, N)

extend string as print {
    create() string => string(data_: allocate(usize.MAX), capacity: usize.MAX, size: 0)
    
    destroy(mutable s:) {
        if self.data_ != null => deallocate(self.data_)
    }
    
    .length(self) usize {
        mutable val start = self.data_
        mutable val count: usize = 0
        for start < self.pointer + self.size {
            start = start + wcwdith(start)
            ++count
        }
        count
    }
    
    stringify(self) string => self

    append(mutable self, c: char) {
        if self.size + 1 > self.capacity {
            self.capacity *= 2
            self.data_ = allocate(self.data_, self.capacity)
        }

        *((self.data_ + self.size) as &byte) = c
    }
}

extend string(T) as print {
    create() string => string(data_: allocate(usize.MAX), capacity: usize.MAX, size: 0)
    
    destroy(mutable self) {
        if self.data_ != null => deallocate(self.data_)
    }
    
    get length(self) usize {
        mutable val start = self.data_
        mutable val count: usize = 0
        for start < self.pointer + self.size {
            start = start + wcwdith(start)
            ++count
        }
        count
    }
    
    stringify(self) string => self

    append(mutable self, c: char) {
        if self.size + 1 > self.capacity {
            self.capacity *= 2
            self.data_ = allocate(self.data_, self.capacity)
        }

        *((self.data_ + self.size) as &byte) = c
    }
}

/*

variant maybe(T) { some(T), none }

type(T) maybe = some(T) | none

type(T) parametric union(t: T)
type(T) parametric_alias = union(t: T)
type(T) parametric = { some(T), none }
type(T) variant { some(T), none }
type(T) alias = (t: T)
type(T) definition(t: T)
type(const N: usize) int_square_matrix = matrix(int, N, N)
type u8 @bits(32) range 0..=256

val anonymous = (a: 32, b: 5)
anonymous.a = 10
typeof(a) == 'anonymous'

type u32 @bits(32) = range -2**31..=2**31
type i32 @bits(32) = range 0..(2**32 + 1)
type natural = u32
type integer = i32
type pointer = range 0..(2**32 + 1)
type bool @bits(8) = variant { true | false }

const null: pointer = 0

function add<simmetric>(ptr: pointer, offset: usize) pointer {
    return ptr + (offset as pointer)
}

extend u32 {
    const MAX: u32 = 2**32
    const MIN: u32 = 0
}

behaviour print {
    stringify(self) string
}

type string = data(hide data: pointer, hide size: usize, hide capacity: usize)

extern {
    @cdecl function wcwdith(buffer: pointer) usize
}

function add<simmetric>(str: &string, c: char) string {
    mutable val copy = str.clone()
    copy.append(c)
    copy
}

extend string as print {
    create() string => string(data: allocate(usize.MAX), capacity: usize.MAX, size: 0)
    
    destroy(mutable self) {
        if self.data != null => deallocate(self.data)
    }
    
    get length(self) usize {
        mutable val start = self.data
        mutable val count: usize = 0
        for start < self.pointer + self.size {
            start = start + wcwdith(start)
            ++count
        }
        count
    }
    
    stringify(self) string => self

    append(mutable self, c: char) {
        if self.size + 1 > self.capacity {
            self.capacity *= 2
            self.data = allocate(self.data, self.capacity)
        }

        *((self.data + self.size) as &byte) = c
    }
}

extend string as print {
    create() string => string(data: allocate(usize.MAX), capacity: usize.MAX, size: 0)
    
    destroy(mutable self) {
        if self.data != null => deallocate(self.data)
    }
    
    get length(self) usize {
        mutable val start = self.data
        mutable val count: usize = 0
        for start < self.pointer + self.size {
            start = start + wcwdith(start)
            ++count
        }
        count
    }
    
    stringify(self) string => self

    append(mutable self, c: char) {
        if self.size + 1 > self.capacity {
            self.capacity *= 2
            self.data = allocate(self.data, self.capacity)
        }

        *((self.data + self.size) as &byte) = c
    }
}
/**
/******/ LAST ONE$
type(T: Default, const N: usize) vector = struct(hide ptr: pointer, hide capacity: usize, hide size: usize)
function(T, const N: usize) front(a: array(T, N)) T => a[0]

val v: vector(int, 10 + 10) = vector!(int, 5*2**2)(ptr: ..., capacity: 10, size: 0)
val first = front!(int, 1*10)(v)

use test.vector

// first notation
extend(T: Default) test.vector(T, 0)
// alternative
extend(T: Default, const N: usize = 0) test.vector
// or
extend(T, const N = 0) test.vector

extend(T: Default, const N: usize) test.vector(T, N) as Default {
    default() test.vector(T, N) => test.vector!(T, N)(ptr: 0x0, 0, 0)
    function(const SIZE: usize) create() test.vector(T, N) {
        // expects SIZE <= N
        return test.vector!(T, N)(ptr:..., SIZE, 0)
    }
    get length(self) usize => self.size
}

val v: vector(real, 100 + 1) = vector!(real, 50 + 60 + 1).create!(10 + 10)()

/*****/

generics delimiters
List<int>
List#<int>#
List$[int]
List[int]
value = List[int, 4] ??
value = List[int, 4 < 5, (true, false)]
**

val a: List<int, (SIZE < N), List<a>> = c;/*
list = List{int}.create{bool, 4}()
b = 120.3f
a = '\u1234567891\what'

Ã©bello = 12;$3f; a = c *= "{ahaha"
c = 'aaaa

static dynamic static const a: T = "ahahahaha;

return 10;

hide test my_test {
    library invalid;
    select a {
        a.. => println()
        value(a, b, "ciao", 1) {}
    }
    for a:int in b {}

    library n
    use error

    alias boh=ciao;

    data Test(a: 1, c : a)

    const a = 10;
    alias Bah = int
    variant Node{a} {
        UnaryExpr(hide op: Token, expr: @Node, self),
        BinaryExpr(op: Token, left: @Node, right: @Node),
        VarDecl(specifiers: ...List{Token}, name: Token, type: Maybe{@Node},value: @Node),
        Boh(a,b),
        A
    }

    use ns.Ahahahah; ciao

    extern {
        function memcpy(mutable dest: *byte, src: *byte, size: usize, self: int) => {}
    }

    behaviour A{const N: usize, int:a, bool} {
        function say_hello() boh
        not_abstract() => println("hello")
        third{a, const N: usize}()
        get size(a: int, self: a) int => self.size  
        set stupid(a: int, b: boh) int {}
    }

    function say_hello() boh => f(); println(ciao);

    extend{} A{} as B{} {
        create() => A()
        add(mutable self) => self.i += 10
        get sum(self) {}; function f<B : c, const F: int>(self) int => i
        hide function f()
    }

    val a = [int: 10](name: "Me", age: infinity, c: 1..2..=3..(1 >= 1 < 4 > 3 <= false == 10 != 2 == boh))

    extend<T, const N: usize> &Vector<T> as *[Collection<T>] {
        create(capacity: int) Vector<T> => Vector(size: 0, store: @[T.default() : 100])
        get size(self) int<> => self.store.length; set size() => a
    }

    behaviour Empty {}

    extern {}

    variant V {}

    function f<a, b : (Integer | Float) & Bool & Int2 | X, const N : int<i>>
    (self, mutable a: int, self: t, b: ...int) (natural, &chars) => f() + 10
    function factorial<>(n: natural, a: function() function() [int: 10]) natural128 {
       return select n {
            0 => 1 || 2 || a != b == a >= 0 < a..=b <= 4 | a ^ b && a >> a << a + a as b;
            1 => n * factorial(n - 1)
            A.B(1, 2, 4)..2..=3 => function(a: b, mutable a: int) {}
        }
    }

    //hide a = b = c + 1 = d;
    // TODO: return not allowed here
    return c;

    union Data<a, b : (Integer<i> | a) & Bool & Int2 | X, const N : int<i>>(a: int, self: t, b: ...int, c: 32/*, self*/)

    data A<a>; data B

    val a = 10; b =c
    a = function(b: int, c: ...int) {
        a = b;
        b++;
        return c + 2;
    }
    if true {
        val b = select f(b, 10)[i].go() >> 2 {
            _ => println("whatever")
            [1, _, 2, c] => println("array")
            ip.v4(addr) => println("ip={addr}")
        }
    }
}
dynamic val (a,b,c) = "abc"
static dynamic mutable val (a,b, c): list<int> = (1);
use ns.algorithm
/*
type natural = range 0..=4294967295
type real = range -2**32..=2**32
type rational = data(numerator: integer, denominator: integer)
type bool = variant { true, false }
type maybe<T> = variant { some(T), none }
type int_array = [int: 10]

type array<T, const N: natural> = [T: N]

type ListNode<T> = data(val: T, next: maybe<&ListNode>)

type LinkedList<T> = data(head: maybe<&ListNode<T>>, tail: maybe<&ListNode<T>>)

extend<T> LinkedList<T> {
    create() LinkedList<T> {
        val empty = &Empty
        return LinkedList(empty, empty)
    }
}

type ListNode<T> = variant {
    Link(val: T, next: &ListNode),
    Tail(val: T),
    Empty
}

type LinkedList<T> = data(head: &ListNode<T>, tail: &ListNode<T>)

type LinkedList<T> = data(head: ListNode<T>, tail: ListNode<T>)

extend<T> LinkedList<T> {
    create() LinkedList<T> {
        val empty = &Empty
        return LinkedList(empty, empty)
    }
}

val array = &[1, 2, 3]

type vector<T> = data(elements: @[T], size: natural)

extend<T> vector<T> {
    create(n: natural) => vector(elements: @[T.default() : n], size: 0)

    destroy(self) => deallocate(self.data as pointer)

    add(mutable self, value: T) {
        if 1 + self.size == self.elements.size {
            self.elements = reallocate(self.elements as pointer, self.elements.size * 2)
        }

        self.elements[self.size++] = value
    }
}

type vector<T> = data(elements: pointer, size: natural)

extend<T> vector<T> {
    create(n: natural) {
        val elems = allocate(n * sizeof(T)))
        for i in 0..n => *(elems + i * sizeof(T)) = T.default()
        return vector(elements: elems)
    }

    add(mutable self, value: T) {
        if 1 + self.size == self.capacity {
            self.capacity *= 2
            self.elements = reallocate(self.elements, self.capacity)
        }

        self.elements[self.size++] = value
    }

    destroy(mutable self) => deallocate(self.data)
}

val vec: vector<natural> = vector<natural>.create(10)
vec.add(10)

range natural 0..=4294967295
data rational(numerator: integer, denominator: integer)
variant bool { true, false }
variant maybe<T> { some(T), none }

return a; = if select 1 ..= 2 ..  ..= 2 < 4 < (5 + 3*s) >= 5 ** 9 * *2 == 2 != 3 && a == b < 3 || false && [].f() == true ||
4 as &&int as bool*2 as **int -3*4++/67 % "caio" + (1,) - () * (1) ** (1, 3,) << 3 & 4 ^ 3 |
!--++[a[++1]:[1,function(a:function(a)){}]][1(a:@1,n :&a, c : @["hi"s: ++i])]() ** 2
[0r].name(1, 3, [])++-- ** --3 ..= 0 > "s".a.a(a:1, b:()) {
    "ciao" {}
    1 {}
    [1, a, "c", 's'] {}
    Point(x, _, a(1)..1) {}
    ..=1..2..=3 {}
    (a, b, 1) | 2 | (3,) {}
    Shape.Triangle {}
    _ {}
}
else {} {} else if a < b {} else if a {} else {} = c = a + b = f()
function(a:...[int:(2), bb:a.a) function() ret.e.a.c<b,> {}/*(a, b, c)*/.i]
//[(a, b, a<1>, 2), 1]
(1, "ciao", 'a', 33.3r, 1, "{a}"s)
//@function(a<3>, b.a.c<a, ...int>, *(a, b,&[(): 4], a3)) @function(([():4]), ()) (...a<b<c>, 3>)
//function ( function(), function(a, b)) [():2]

val a = 10abc;
val ð¡ = 10a
"ciao {} {emanuel}, io sono {ignoto + { "inside" } {} \e }"str
"{}"s
const Ï Ï = "3.14
/* identifiers and labels */ _æ¼¢å­_is_valid Ï name var aliasa data d class if rat rational645 rational32 elif truee @label @test 
/* strings */ "valid" "invalidð¡!" "strange\n\t\b\h\v\u12345678\u02" "unterminated\"
/* chars */ '\u123' '\x19' '\o198' '123' '\cd' ''
/* numbers booleans */ true 123 0.1e+ 1.23f 1f 1i 1a false
/* symbols */ +++ + . : , -- === +== -= *****=
/* single-line comment */ // Hi there
/* unterminated multi-line comment /* here1
/** and here2
/** and here3 ð¡ */
ends here.

Algoritmo per stringa interpolata
start Ã¨ posizione del primo `"`
end Ã¨ posizione dell'ultimo `"`
start = start + 1
cur = start
while cur != end:
    if cur != '{':
        beg = cur
        while cur != '{' && cur != end:
            ++cur
        add-segment(beg, cur, LITERAL)
    else
        ++cur
        beg = cur
        while cur != '}':
            ++cur
        add-segment(beg, cur, EXPRESSION)
        ++cur // skip '}'  

mother fucker
dick head
dumb fucker
dumbass
idiot
jerk
cunt
prick


TYPE        TIME-NO-TOKENS      TIME-TOKENS
scanner     0.36s               0.50s
tokenizer   0.36s               0.50s

IDEA: ASSEGNARE AD OGNI NODO DELL'AST UN ID COSI DA POTER STAMPARE SU RICHIESTA IL CODICE SORGENTE
DI UN DETERMINATO NODO DELL'ALBERO SINTATTICO*/
