type(U) vec(hide _data: [U], hide _size: usize)

extend(U) vec(U) {
    of(n: usize) vec(U) = vec!(U)(_data: allocate!(U)(n), _size: 0usize)
    clear(mutable self: *vec(U)) = deallocate(self._data)
    at(self: vec(U), index: usize) U = self._data[index]
    set(mutable self: *vec(U), index: usize, value: U) { self._data[index] = value }
    .size(self: vec(U)) usize = self._size
}

see(n: i32) i32 {
    mutable val a = 3.2
    a **= if n % 2 == 0 { 1 }
    else if n % 3 == 0 { 3 }
    else if n % 5 == 0 { 5 }
    else if n % 7 == 0 { 7 }
    else { if n < 0 { 101 } else { u8.BITS as i32 } }
    return a as i32
}

start(args: [chars]) {
    /*mutable val v = vec!(i32).of(3)
    v.set(0, -10)
    v.set(1, 20)
    println("Hey, my name is {args[1]}, goddamn \u1f603!! {v.at(0)}, {v.at(1)}, {see(9)}")
    mutable val a: opt(i32) = 1
    when a is i32 {
        println("a's value is {a}")
    }
    else {
        println("fuck! a has no value")
    }
    println("let's see! {a.or(-1)}, empty = {a.empty}")*/
    
    type(U) Ty(a: [U], b: U, c: none | i32 | string)
    mutable val t = Ty!(i32)(a: [1, 2], b: 3, c: 2)
    when t = Ty!(i32)(a: _, b: 1..=3, c: 1..3) {
        println("damn!")
    }
}