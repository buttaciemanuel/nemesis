nucleus nscore

// prints a string on the console
println(s: string) {}

// test condition, if it fails, then program stops execution with non zero status
// prints eventually stacktrace
assert(condition: bool, message: string) {}

// crash and stops the process printing a message with non zero status
// prints eventually stacktrace
crash(message: string) {}

// allocate a buffer of objects dynamically
function(T) allocate(n: usize) [T] = []

// deallocate a buffer of objects dynamically
function(T) deallocate(slice: [T]) {}

// dynamically allocate a single object
function(T) free(memory: *T) {}

// return size occupied by the type
function(T) sizeof() usize = 0usize

// stops the process with exit code
exit(code: i32) {}

// prints stacktrace
stacktrace() {}

// none type
type none

// optional type
type(T) opt is T | none

// extension of optional type
extend(T) opt(T) {
    or(self: opt(T), other: T) T = when self is T { self } else { other }
    .empty(self: opt(T)) bool = when self is T { false } else { true }
    .value(self: opt(T)) T {
        when self is none { crash("you are unpacking empty optional, idiot!") }
        self as T
    }
}

// this is the concept for iterable object
concept(T) iterable {
    function(U) iter(self: T) U
}

// this is the concept for iterator object
concept(T) iterator {
    function(U) next(self: T) opt(U)
}